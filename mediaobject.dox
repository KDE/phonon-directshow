/**
\page phonon_MediaObject The MediaObject class

\section phonon_MediaObject_derived Media Data Producing Class

There are a few classes that can produce media data (often called a source in
media frameworks). MediaObject is the most prominent of them, \ref
phonon_ByteStream "ByteStream" and \ref phonon_AvCapture "AvCapture" the other
two. For the backend implementation it might make sense to create a common
parentclass for those three that implements the common methods documented in
\ref phonon_AbstractMediaProducer "AbstractMediaProducer".

\section phonon_MediaObject_requiredfunctions Required Functions
\li KUrl \ref phonon_MediaObject_url "url()"
\li void \ref phonon_MediaObject_setUrl "setUrl(KUrl)"

\li qint32 \ref phonon_MediaObject_aboutToFinishTime "aboutToFinishTime()"
\li void \ref phonon_MediaObject_setAboutToFinishTime "setAboutToFinishTime(qint32)"

\li qint64 \ref phonon_MediaObject_totalTime "totalTime()"

\section phonon_MediaObject_optionalfunctions Optional Functions
\li qint64 \ref phonon_MediaObject_remainingTime "remainingTime()"

\section phonon_MediaObject_signals Signals
\li void \ref phonon_MediaObject_length "length( qint64 length )"
\li void \ref phonon_MediaObject_aboutToFinish "aboutToFinish( qint32 msec )"
\li void \ref phonon_MediaObject_finished "finished()"

\section phonon_MediaObject_memberdocs Member Function Documentation

\subsection phonon_MediaObject_url KUrl url()
Get the URL that the MediaObject should use as media data source.

\subsection phonon_MediaObject_setUrl void setUrl(KUrl)
Tells the backed the media location. It is expected that the
backend now starts preloading the media data, filling the audio
and video buffers and making all media meta data available. It
will also trigger the length signal.

If the backend does not know how to handle the URL it needs to
change state to Phonon::ErrorState. Then the frontend MediaObject
will delete this backend MediaObject instance and request a
ByteStream object to feed the media data using KIO. That means
you don't need to bother about providing KIO access, just provide the
ByteStream class

\see phonon_MediaObject_length

\subsection phonon_MediaObject_aboutToFinishTime qint32 aboutToFinishTime()
Returns the time in milliseconds the \ref phonon_MediaObject_aboutToFinish
"aboutToFinish" signal is emitted before the playback if finished and \ref
phonon_MediaObject_finished "finished" is emitted.

\subsection phonon_MediaObject_setAboutToFinishTime void setAboutToFinishTime( qint32 msec )
Sets the time in milliseconds the \ref phonon_MediaObject_aboutToFinish
"aboutToFinish" signal is emitted before the playback if finished and \ref
phonon_MediaObject_finished "finished" is emitted.

\param msec The time in milliseconds. If the value is less than or equal to 0
the \ref phonon_MediaObject_aboutToFinish "aboutToFinish" signal is disabled.

\subsection phonon_MediaObject_totalTime qint64 totalTime()
Get the total time (in milliseconds) of the file currently being played.

\subsection phonon_MediaObject_remainingTime qint64 remainingTime()
Get the remaining time (in milliseconds) of the file currently being played. If
the method is not implemented in the backend the frontend will use the
difference between \ref phonon_MediaObject_totalTime and \ref
phonon_AbstractMediaProducer_currentTime.

\section phonon_MediaObject_signaldocs Signals Documentation
\subsection phonon_MediaObject_aboutToFinish void aboutToFinish( qint32 msec )
Emitted when the file has finished playing on its own.
I.e. it is not emitted if you call stop(), pause() or
load(), but only on end-of-file or a critical error.
void finished()

\param msec The remaining time until the playback finishes

\subsection phonon_MediaObject_length void length( qint64 length )
This signal is emitted as soon as the length of the media file is
known or has changed. For most non-local media data the length of
the media can only be known after some time. At that time the
totalTime function can not return useful information. You have
to wait for this signal to know the real length.

\param length The length of the media file in milliseconds.

\see phonon_MediaObject_totalTime

\subsection phonon_MediaObject_finished void finished()
This signal is emitted when the playback of the media finished (on its own).
It is not emitted if stop() or pause() are called - only on end-of-file or a
critical error (for example the media data stream is corrupted and playback of
the media has to be finished).

\see phonon_MediaObject_aboutToFinish
*/
