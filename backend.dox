/**
\page phonon_Backend The Backend Class

\section phonon_Backend_requiredfunctions Required Functions
\li bool \ref phonon_Backend_supportsOSD "supportsOSD()"
\li bool \ref phonon_Backend_supportsFourcc "supportsFourcc( quint32 )"
\li bool \ref phonon_Backend_supportsSubtitles "supportsSubtitles()"
\li bool \ref phonon_Backend_supportsVideo "supportsVideo()"
\li QStringList \ref phonon_Backend_knownMimeTypes "knownMimeTypes()"

\li \ref QSet "QSet<int>" \ref phonon_Backend_xIndexes "audioOutputDeviceIndexes()"
\li QString \ref phonon_Backend_xName "audioOutputDeviceName( int )"
\li QString \ref phonon_Backend_xDescription "audioOutputDeviceDescription( int )"

\li \ref QSet "QSet<int>" \ref phonon_Backend_xIndexes "videoOutputDeviceIndexes()"
\li QString \ref phonon_Backend_xName "videoOutputDeviceName( int )"
\li QString \ref phonon_Backend_xDescription "videoOutputDeviceDescription( int )"

\li \ref QSet "QSet<int>" \ref phonon_Backend_xIndexes "audioCaptureDeviceIndexes()"
\li QString \ref phonon_Backend_xName "audioCaptureDeviceName( int )"
\li QString \ref phonon_Backend_xDescription "audioCaptureDeviceDescription( int )"
\li qint32 \ref phonon_Backend_audioCaptureDeviceVideoIndex "audioCaptureDeviceVideoIndex( int )"

\li \ref QSet "QSet<int>" \ref phonon_Backend_xIndexes "videoCaptureDeviceIndexes()"
\li QString \ref phonon_Backend_xName "videoCaptureDeviceName( int )"
\li QString \ref phonon_Backend_xDescription "videoCaptureDeviceDescription( int )"
\li qint32 \ref phonon_Backend_videoCaptureDeviceAudioIndex "videoCaptureDeviceAudioIndex( int )"

\li \ref QSet "QSet<int>" \ref phonon_Backend_xIndexes "audioEffectIndexes()"
\li QString \ref phonon_Backend_xName "audioEffectName( int )"
\li QString \ref phonon_Backend_xDescription "audioEffectDescription( int )"

\li \ref QSet "QSet<int>" \ref phonon_Backend_xIndexes "videoEffectIndexes()"
\li QString \ref phonon_Backend_xName "videoEffectName( int )"
\li QString \ref phonon_Backend_xDescription "videoEffectDescription( int )"

\li \ref QSet "QSet<int>" \ref phonon_Backend_xIndexes "visualizationIndexes()"
\li QString \ref phonon_Backend_xName "visualizationName( int )"
\li QString \ref phonon_Backend_xDescription "visualizationDescription( int )"

\li \ref QSet "QSet<int>" \ref phonon_Backend_xIndexes "containerFormatIndexes()"
\li QString \ref phonon_Backend_xName "containerFormatName( int )"
\li QString \ref phonon_Backend_xDescription "containerFormatDescription( int )"

\li \ref QSet "QSet<int>" \ref phonon_Backend_xIndexes "audioCodecIndexes()"
\li QString \ref phonon_Backend_xName "audioCodecName( int )"
\li QString \ref phonon_Backend_xDescription "audioCodecDescription( int )"

\li \ref QSet "QSet<int>" \ref phonon_Backend_xIndexes "videoCodecIndexes()"
\li QString \ref phonon_Backend_xName "videoCodecName( int )"
\li QString \ref phonon_Backend_xDescription "videoCodecDescription( int )"

\li const char* \ref phonon_Backend_uiLibrary "uiLibrary()"

\section phonon_Backend_optionalfunctions Optional Functions
\li const char* \ref phonon_Backend_uiSymbol "uiSymbol()"

\li QObject* \ref phonon_Backend_createAudioDataOutput "createAudioDataOutput( QObject* )"
\li QObject* \ref phonon_Backend_createAudioEffect "createAudioEffect( int, QObject* )"
\li QObject* \ref phonon_Backend_createAudioOutput "createAudioOutput( QObject* )"
\li QObject* \ref phonon_Backend_createAudioPath "createAudioPath( QObject* )"
\li QObject* \ref phonon_Backend_createAvCapture "createAvCapture( QObject* )"
\li QObject* \ref phonon_Backend_createBrightnessControl "createBrightnessControl( QObject* )"
\li QObject* \ref phonon_Backend_createByteStream "createByteStream( QObject* )"
\li QObject* \ref phonon_Backend_createMediaObject "createMediaObject( QObject* )"
\li QObject* \ref phonon_Backend_createMediaQueue "createMediaQueue( QObject* )"
\li QObject* \ref phonon_Backend_createVideoDataOutput "createVideoDataOutput( QObject* )"
\li QObject* \ref phonon_Backend_createVideoEffect "createVideoEffect( int, QObject* )"
\li QObject* \ref phonon_Backend_createVideoPath "createVideoPath( QObject* )"
\li QObject* \ref phonon_Backend_createVisualization "createVisualization( QObject* )"
\li QObject* \ref phonon_Backend_createVolumeFaderEffect "createVolumeFaderEffect( QObject* )"

\section Member Function Documentation

\subsection phonon_Backend_createAudioDataOutput QObject* createAudioDataOutput( QObject* parent )
Normally the implementation simply does:
\code
return new AudioDataOutput( parent );
\endcode
\param parent The QObject parent for the new object.
\returns A new instance of a \ref phonon_AudioDataOutput "AudioDataOutput"
class.

\subsection phonon_Backend_createAudioEffect QObject* createAudioEffect( int index, QObject* parent )
Normally the implementation simply does:
\code
return new AudioEffect( index, parent );
\endcode
\param index The index of the requested audio Effect.
\param parent The QObject parent for the new object.
\returns A new instance of a \ref phonon_AudioEffect "AudioEffect"
class.
\see phonon_Backend_audioEffectIndexes

\subsection phonon_Backend_createAudioOutput QObject* createAudioOutput( QObject* parent )
Normally the implementation simply does:
\code
return new AudioOutput( parent );
\endcode
\param parent The QObject parent for the new object.
\returns A new instance of a \ref phonon_AudioOutput "AudioOutput"
class.

\subsection phonon_Backend_createAudioPath QObject* createAudioPath( QObject* parent )
Normally the implementation simply does:
\code
return new AudioPath( parent );
\endcode
\param parent The QObject parent for the new object.
\returns A new instance of a \ref phonon_AudioPath "AudioPath"
class.

\subsection phonon_Backend_createAvCapture QObject* createAvCapture( QObject* parent )
Normally the implementation simply does:
\code
return new AvCapture( parent );
\endcode
\param parent The QObject parent for the new object.
\returns A new instance of a \ref phonon_AvCapture "AvCapture"
class.

\subsection phonon_Backend_createBrightnessControl QObject* createBrightnessControl( QObject* parent )
Normally the implementation simply does:
\code
return new BrightnessControl( parent );
\endcode
\param parent The QObject parent for the new object.
\returns A new instance of a \ref phonon_BrightnessControl "BrightnessControl"
class.

\subsection phonon_Backend_createByteStream QObject* createByteStream( QObject* parent )
Normally the implementation simply does:
\code
return new ByteStream( parent );
\endcode
\param parent The QObject parent for the new object.
\returns A new instance of a \ref phonon_ByteStream "ByteStream"
class.

\subsection phonon_Backend_createMediaObject QObject* createMediaObject( QObject* parent )
Normally the implementation simply does:
\code
return new MediaObject( parent );
\endcode
\param parent The QObject parent for the new object.
\returns A new instance of a \ref phonon_MediaObject "MediaObject"
class.

\subsection phonon_Backend_createMediaQueue QObject* createMediaQueue( QObject* parent )
Normally the implementation simply does:
\code
return new MediaQueue( parent );
\endcode
\param parent The QObject parent for the new object.
\returns A new instance of a \ref phonon_MediaQueue "MediaQueue"
class.

\subsection phonon_Backend_createVideoDataOutput QObject* createVideoDataOutput( QObject* parent )
Normally the implementation simply does:
\code
return new VideoDataOutput( parent );
\endcode
\param parent The QObject parent for the new object.
\returns A new instance of a \ref phonon_VideoDataOutput "VideoDataOutput"
class.

\subsection phonon_Backend_createVideoEffect QObject* createVideoEffect( int index, QObject* parent )
Normally the implementation simply does:
\code
return new VideoEffect( index, parent );
\endcode
\param index The index of the requested video Effect.
\param parent The QObject parent for the new object.
\returns A new instance of a \ref phonon_VideoEffect "VideoEffect"
class.
\see phonon_Backend_videoEffectIndexes

\subsection phonon_Backend_createVideoPath QObject* createVideoPath( QObject* parent )
Normally the implementation simply does:
\code
return new VideoPath( parent );
\endcode
\param parent The QObject parent for the new object.
\returns A new instance of a \ref phonon_VideoPath "VideoPath"
class.

\subsection phonon_Backend_createVisualization QObject* createVisualization( QObject* parent )
Normally the implementation simply does:
\code
return new Visualization( parent );
\endcode
\param parent The QObject parent for the new object.
\returns A new instance of a \ref phonon_Visualization "Visualization"
class.

\subsection phonon_Backend_createVolumeFaderEffect QObject* createVolumeFaderEffect( QObject* parent )
Normally the implementation simply does:
\code
return new VolumeFaderEffect( parent );
\endcode
\param parent The QObject parent for the new object.
\returns A new instance of a \ref phonon_VolumeFaderEffect "VolumeFaderEffect"
class.

\subsection phonon_Backend_uiLibrary const char* uiLibrary()
\returns The name of the library that needs to be loaded to get access to the
GUI dependent classes.
\see \ref phonon_UiBackend

\subsection phonon_Backend_uiSymbol const char* uiSymbol()
This method is useful if you want to put the GUI dependent and GUI indepentend
classes into the same DSO. Then \ref phonon_Backend_uiLibrary "uiLibrary()"
returns the same library as is specified in the .desktop file.
\returns The symbol in the library that needs to be called to get access to the
\ref phonon_UiBackend "UiBackend" instance.

\subsection phonon_Backend_supportsOSD bool supportsOSD()
Tells whether the backend implements the OSD interfaces.
TODO: Currently not used.

\subsection phonon_Backend_supportsFourcc bool supportsFourcc( quint32 fourcc )
Tells whether the FOURCC (four character code) is supported for
the \ref phonon_VideoDataOutput "VideoDataOutput" interface. If you return \c true, you have to be
able to return VideoFrame objects accordingly from
\ref phonon_VideoDataOutput "VideoDataOutput".
\param fourcc A four character code defining a video frame format.
\returns \c true if your \ref phonon_VideoDataOutput "VideoDataOutput" can
output video frames in the requested format.
\returns \c false if the video frames can not be converted into the requested
format.

\subsection phonon_Backend_supportsSubtitles bool supportsSubtitles()
TODO: Currently not used.

\subsection phonon_Backend_supportsVideo bool supportsVideo()
Tells whether the backend is audio only or can handle video files
and display of videos.
\returns \c false is VideoPath, VideoEffect and so on are not implemented.

\subsection phonon_Backend_knownMimeTypes QStringList knownMimeTypes()
Lists the MIME types the backend can read and decode.

\subsection phonon_Backend_xIndexes QSet<int> <device/codec/effect/...>Indexes()
	Returns a set of indexes that identify the devices/codecs/effects/... the
	backend supports. This list needs to be compiled from looking at
	available hardware and virtual devices/plugins/... . The implementation
	should use cached information, but you need to invalidate the cache
	whenever the hardware configuration changes or new virtual devices come
	available/new plugins are installed/... .

	\return The indexes of the available devices/codecs/effects/...

	\see \ref phonon_Backend_xName
	\see \ref phonon_Backend_xDescription

\subsection phonon_Backend_xName QString <device/codec/effect/...>Name( int index )
	Returns the name of the given device/codec/effect/...

	\param index The index of one device/codec/effect/... this is one index
	out of \ref phonon_Backend_xIndexes
	
	\returns A translated user visible string to name the device.

	\see \ref phonon_Backend_xIndexes
	\see \ref phonon_Backend_xDescription
\subsection phonon_Backend_xDescription QString <device/codec/effect/...>Description( int index )
	Returns the description of the given device/codec/effect/...

	\param index The index of one device/codec/effect/... this is one index
	out of \ref phonon_Backend_xIndexes
	
	\returns A translated user visible string to describe the device.

	\see \ref phonon_Backend_xIndexes
	\see \ref phonon_Backend_xName

\subsection phonon_Backend_audioCaptureDeviceVideoIndex qint32 audioCaptureDeviceVideoIndex( int index )
	\param index The index of the device. This is one of the indexes the backend
	returned via \ref phonon_Backend_xIndexes
	\returns An index of a video capture device that is associated with the given
	audio capture device. For example a webcam might have both a video and an audio
	capture device, and in order give the user a hint that the audio and video
	capture devices belong together this index is used.
	\returns If there is no associated video capture device return -1.

\subsection phonon_Backend_videoCaptureDeviceAudioIndex qint32 videoCaptureDeviceAudioIndex( int index )
	\param index The index of the device. This is one of the indexes the backend
	returned via \ref phonon_Backend_xIndexes
	\returns An index of a audio capture device that is associated with the given
	video capture device. For example a webcam might have both a audio and an video
	capture device, and in order give the user a hint that the video and audio
	capture devices belong together this index is used.
	\returns If there is no associated audio capture device return -1.

*/
