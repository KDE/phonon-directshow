/*
 * This file was generated by dbusidl2cpp version 0.4
 * when processing input file org.kde.Phonon.AudioOutput.xml
 *
 * dbusidl2cpp is Copyright (C) 2006 Trolltech AS. All rights reserved.
 *
 * This is an auto-generated file.
 */

#ifndef AUDIOOUTPUTADAPTOR_H_56661149284959
#define AUDIOOUTPUTADAPTOR_H_56661149284959

#include <QtCore/QObject>
#include <dbus/qdbus.h>
class QByteArray;
template<class T> class QList;
template<class Key, class Value> class QMap;
class QString;
class QStringList;
class QVariant;

/*
 * Adaptor class for interface org.kde.Phonon.AudioOutput
 */
class AudioOutputAdaptor: public QDBusAbstractAdaptor
{
    Q_OBJECT
    Q_CLASSINFO("D-Bus Interface", "org.kde.Phonon.AudioOutput")
    Q_CLASSINFO("D-Bus Introspection", ""
"  <interface name=\"org.kde.Phonon.AudioOutput\" >\n"
"    <method name=\"name\" >\n"
"      <arg direction=\"out\" type=\"s\" name=\"name\" />\n"
"    </method>\n"
"    <method name=\"categoryName\" >\n"
"      <arg direction=\"out\" type=\"s\" name=\"categoryName\" />\n"
"    </method>\n"
"    <property access=\"readwrite\" type=\"d\" name=\"volume\" />\n"
"  </interface>\n"
        "")
public:
    AudioOutputAdaptor(QObject *parent);
    virtual ~AudioOutputAdaptor();

public: // PROPERTIES
    Q_PROPERTY(double volume READ volume WRITE setVolume)
    double volume() const;
    void setVolume(double value);

public Q_SLOTS: // METHODS
    QString categoryName();
    QString name();
Q_SIGNALS: // SIGNALS
};

#endif
