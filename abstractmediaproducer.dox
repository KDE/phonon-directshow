/**
\page phonon_AbstractMediaProducer The AbstractMediaProducer Class

\section phonon_AbstractMediaProducer_requiredfunctions Required Functions
\li QStringList \ref phonon_AbstractMediaProducer_availableAudioStreams "availableAudioStreams()"
\li QStringList \ref phonon_AbstractMediaProducer_availableVideoStreams "availableVideoStreams()"
\li QStringList \ref phonon_AbstractMediaProducer_availableSubtitleStreams "availableSubtitleStreams()"
\li void \ref phonon_AbstractMediaProducer_selectAudioStream "selectAudioStream( QString streamName, const QObject* audioPath )"
\li void \ref phonon_AbstractMediaProducer_selectVideoStream "selectVideoStream( QString streamName, const QObject* videoPath )"
\li void \ref phonon_AbstractMediaProducer_selectSubtitleStream "selectSubtitleStream( QString streamName, const QObject* videoPath )"
\li QString \ref phonon_AbstractMediaProducer_selectedAudioStream "selectedAudioStream( const QObject* audioPath )"
\li QString \ref phonon_AbstractMediaProducer_selectedVideoStream "selectedVideoStream( const QObject* videoPath )"
\li QString \ref phonon_AbstractMediaProducer_selectedSubtitleStream "selectedSubtitleStream( const QObject* videoPath )"

\li qint64 \ref phonon_AbstractMediaProducer_currentTime "currentTime()"
\li bool \ref phonon_AbstractMediaProducer_hasVideo "hasVideo()"

\li bool \ref phonon_AbstractMediaProducer_addAudioPath "addAudioPath( QObject* audioPath )"
\li bool \ref phonon_AbstractMediaProducer_addVideoPath "addVideoPath( QObject* videoPath )"
\li void \ref phonon_AbstractMediaProducer_removeAudioPath "removeAudioPath( QObject* audioPath )"
\li void \ref phonon_AbstractMediaProducer_removeVideoPath "removeVideoPath( QObject* videoPath )"

\li qint32 \ref phonon_AbstractMediaProducer_tickInterval "tickInterval()"
\li void \ref phonon_AbstractMediaProducer_setTickInterval "setTickInterval( qint32 interval )"

\li void \ref phonon_AbstractMediaProducer_pause "pause()"
\li void \ref phonon_AbstractMediaProducer_play "play()"
\li void \ref phonon_AbstractMediaProducer_stop "stop()"
\li Phonon::State \ref phonon_AbstractMediaProducer_state "state()"
\li void \ref phonon_AbstractMediaProducer_seek "seek( qint64 time )"
\li bool \ref phonon_AbstractMediaProducer_seekable "seekable()"

\section phonon_AbstractMediaProducer_signals Signals
\li void \ref phonon_AbstractMediaProducer_stateChanged "stateChanged( Phonon::State newstate, Phonon::State oldstate )"
\li void \ref phonon_AbstractMediaProducer_tick "tick( qint64 time )"

\section phonon_MediaObject_memberdocs Member Function Documentation

\subsection phonon_AbstractMediaProducer_availableAudioStreams QStringList availableAudioStreams()
	Lists the available audio streams the media provides. The strings are
	what is shown to the user and often just consist of the stream name
	encoded into the media file.

	Be prepared to change the audio stream when \ref
	phonon_AbstractMediaProducer_selectAudioStream is called with one of the
	strings of this list. If the media has multiple audio streams but the
	backend cannot switch then the list of available audio streams should be
	empty.

	\returns A list of names for the available audio streams.

\subsection phonon_AbstractMediaProducer_availableVideoStreams QStringList availableVideoStreams()
	Lists the available video streams the media provides. The strings are
	what is shown to the user and often just consist of the stream name
	encoded into the media file.

	Be prepared to change the video stream when \ref
	phonon_AbstractMediaProducer_selectVideoStream is called with one of the
	strings of this list. If the media has multiple video streams but the
	backend cannot switch then the list of available video streams should be
	empty.

	\returns A list of names for the available video streams.

\subsection phonon_AbstractMediaProducer_availableSubtitleStreams QStringList availableSubtitleStreams()
	Lists the available subtitle streams the media provides. The strings are
	what is shown to the user and often just consist of the stream name
	encoded into the media file.

	Be prepared to change the subtitle stream when \ref
	phonon_AbstractMediaProducer_selectSubtitleStream is called with one of the
	strings of this list. If the media has multiple subtitle streams but the
	backend cannot switch then the list of available subtitle streams should be
	empty.

	\returns A list of names for the available subtitle streams.

\subsection phonon_AbstractMediaProducer_selectAudioStream void selectAudioStream( QString streamName, const QObject* audioPath )
	Selects one audio stream for the selected AudioPath object.

	\param audioPath If \p 0 the audio stream should be used for all
	connected AudioPath objects. Else the audio stream selection should only
	be made for the one specified AudioPath. This way the user can request
	different audio streams for different audio paths/outputs.

\subsection phonon_AbstractMediaProducer_selectVideoStream void selectVideoStream( QString streamName, const QObject* videoPath )
	Selects one video stream for the selected VideoPath object.

	\param videoPath If \p 0 the video stream should be used for all
	connected VideoPath objects. Else the video stream selection should only
	be made for the one specified VideoPath. This way the user can request
	different video streams for different video paths/outputs.

\subsection phonon_AbstractMediaProducer_selectSubtitleStream void selectSubtitleStream( QString streamName, const QObject* videoPath )
	Selects one subtitle stream for the selected VideoPath object. By
	default normally no subtitle is selected, but depending on the media
	this may be different.

	\param videoPath If \p 0 the video stream should be used for all
	connected VideoPath objects. Else the video stream selection should only
	be made for the one specified VideoPath. This way the user can request
	different video streams for different video paths/outputs.

\subsection phonon_AbstractMediaProducer_selectedAudioStream QString selectedAudioStream( const QObject* audioPath )
	Returns the selected audio stream for the given AudioPath object.

\subsection phonon_AbstractMediaProducer_selectedVideoStream QString selectedVideoStream( const QObject* videoPath )
	Returns the selected video stream for the given VideoPath object.

\subsection phonon_AbstractMediaProducer_selectedSubtitleStream QString selectedSubtitleStream( const QObject* videoPath )
	Returns the selected subtitle stream for the given VideoPath object.

\subsection phonon_AbstractMediaProducer_currentTime qint64 currentTime()
	Get the current time (in milliseconds) of the file currently being played.

\subsection phonon_AbstractMediaProducer_hasVideo bool hasVideo()
	Check whether the media data includes a video stream.

	\return returns \p true if the media contains video data

\subsection phonon_AbstractMediaProducer_addAudioPath bool addAudioPath( QObject* audioPath )
	Adds an AudioPath object to tell where to send the audio data.

	The frontend class ensures that the \p audioPath is unique,
	meaning the AudioPath object has not been added to this object.

\subsection phonon_AbstractMediaProducer_addVideoPath bool addVideoPath( QObject* videoPath )
	Adds a VideoPath object to tell where to send the video data (and
	render the subtitle if one is selected).

	The frontend class ensures that the \p videoPath is unique,
	meaning the VideoPath object has not been added to this object.

\subsection phonon_AbstractMediaProducer_removeAudioPath void removeAudioPath( QObject* audioPath )
	Removes the AudioPath object from the flow graph. This function will
	only be called with a valid \p audioPath, meaning that the path has been
	added to this object before.

\subsection phonon_AbstractMediaProducer_removeVideoPath void removeVideoPath( QObject* videoPath )
	Removes the VideoPath object from the flow graph. This function will
	only be called with a valid \p videoPath, meaning that the path has been
	added to this object before.

\subsection phonon_AbstractMediaProducer_tickInterval qint32 tickInterval()
	Return the time interval in milliseconds between two ticks.

	\returns Returns the tick interval that it was set to (might not
	be the same as you asked for).

\subsection phonon_AbstractMediaProducer_setTickInterval void setTickInterval( qint32 newTickInterval )
	Change the interval the tick signal is emitted. If you set \p
	msec to 0 the signal gets disabled.

	\param newTickInterval tick interval in milliseconds

	\returns Returns the tick interval that it was set to (might not
			be the same as you asked for).

\subsection phonon_AbstractMediaProducer_pause void pause()
	Pause a playing media. This method is only called if the state transition to Phonon::PausedState is well defined.

\subsection phonon_AbstractMediaProducer_play void play()
	Play the media data. This method is only called if the state transition to Phonon::PlayingState is well defined.

\subsection phonon_AbstractMediaProducer_stop void stop()
	Stop the playback. This method is only called if the state transition to Phonon::StoppedState is well defined.

\subsection phonon_AbstractMediaProducer_state Phonon::State state()
	Get the current state.

\subsection phonon_AbstractMediaProducer_seek void seek( qint64 time )
	Seek to the time indicated.

	\param time The time in milliseconds where to continue playing.

\subsection phonon_AbstractMediaProducer_seekable bool seekable()
	If the current media may be seeked returns true.

	\returns whether the current media may be seeked.

\section phonon_MediaObject_signaldocs Signals Documentation
\subsection phonon_AbstractMediaProducer_stateChanged void stateChanged( Phonon::State newstate, Phonon::State oldstate )
	Emitted when the state of the MediaObject has changed.
	In case you're not interested in the old state you can also
	connect to a slot that only has one State argument.

	\param newstate The state the Player is in now.
	\param oldstate The state the Player was in before.

\subsection phonon_AbstractMediaProducer_tick void tick( qint64 time )
	This signal gets emitted every tickInterval milliseconds.

	\param time The position of the media file in milliseconds.

	\see phonon_AbstractMediaProducer_setTickInterval
	\see phonon_AbstractMediaProducer_tickInterval
*/
